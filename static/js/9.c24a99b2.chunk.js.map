{"version":3,"sources":["components/Login/LoginForm.jsx","components/Login/Login.jsx"],"names":["reduxForm","form","handleSubmit","isCaptcha","captcha","error","isFetching","onSubmit","className","style","Field","component","FormControl","placeholder","name","fieldType","validate","required","type","src","autoFocus","formCommonError","disabled","connect","state","isAuth","auth","login","props","to","formData"],"mappings":"oNAiDeA,cAAU,CAAEC,KAAM,SAAlBD,EAzCC,SAAC,GAA2D,IAA1DE,EAAyD,EAAzDA,aAAcC,EAA2C,EAA3CA,UAAWC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAIvD,OACI,uBAAMC,SAAUL,EAAcM,UAAWC,IAAMR,KAA/C,UACI,8BACI,cAACS,EAAA,EAAD,CAAOC,UAAWC,IAAaC,YAAa,QAASC,KAAM,QAASC,UAAU,QAC1EC,SAAU,CAACC,SAEnB,8BACI,cAACP,EAAA,EAAD,CAAOC,UAAWC,IAAaM,KAAK,WAAWL,YAAa,WAAYC,KAAM,WAAYC,UAAU,QAChGC,SAAU,CAACC,SAEnB,gCACI,cAACP,EAAA,EAAD,CAAOC,UAAWC,IAAaM,KAAM,WAAYJ,KAAM,cAAeC,UAAU,UADpF,kBAIA,8BACKZ,GAAa,gCACV,qBAAKgB,IAAKf,IACV,8BACI,cAACM,EAAA,EAAD,CAAOC,UAAWC,IAAaC,YAAa,UAAWC,KAAM,UAAWC,UAAU,QAC9EC,SAAU,CAACC,KAAWG,WAAW,WAIjD,8BACCf,GAAS,qBAAKG,UAAWC,IAAMY,gBAAtB,SACLhB,MAGL,8BACI,wBAAQiB,SAAUhB,EAAlB,2BCZDiB,uBARO,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBrB,QAASoB,EAAME,KAAKtB,QACpBD,UAAWqB,EAAME,KAAKvB,UACtBG,WAAYkB,EAAME,KAAKpB,cAIe,CAAEqB,WAA3BJ,EAtBD,SAACK,GAKb,OAAIA,EAAMH,OAAe,cAAC,IAAD,CAAUI,GAAG,aAEpC,gCACE,uCACA,cAAC,EAAD,2BAAeD,GAAf,IAAsBrB,SAPX,SAACuB,GACdF,EAAMD,MAAMG","file":"static/js/9.c24a99b2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required } from '../../utils/validator';\r\nimport { FormControl } from '../common/FormsControls/FormsControls';\r\nimport style from './../common/FormsControls/FormsControls.module.css';\r\n\r\n\r\n\r\nlet LoginForm = ({handleSubmit, isCaptcha, captcha, error, isFetching}) => {\r\n    \r\n \r\n \r\n    return (\r\n        <form onSubmit={handleSubmit} className={style.form}>\r\n            <div>\r\n                <Field component={FormControl} placeholder={'email'} name={'email'} fieldType='input'\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field component={FormControl} type='password' placeholder={'Password'} name={'password'} fieldType='input'\r\n                    validate={[required]} />\r\n            </div>\r\n            <div>\r\n                <Field component={FormControl} type={'checkbox'} name={'remember me'} fieldType='input' /> remember me\r\n            </div>\r\n            \r\n            <div>\r\n                {isCaptcha && <div>\r\n                    <img src={captcha} />\r\n                    <div>\r\n                        <Field component={FormControl} placeholder={'captcha'} name={'captcha'} fieldType='input'\r\n                            validate={[required]} autoFocus={true}  />\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n            <div>\r\n            {error && <div className={style.formCommonError}>\r\n                {error}\r\n            </div>}\r\n            </div>\r\n            <div>\r\n                <button disabled={isFetching}>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default reduxForm({ form: 'login'})(LoginForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport { login } from '../../redux/authReducer';\r\nimport LoginForm from './LoginForm';\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n  let onSubmit = (formData) => {  \r\n    props.login(formData);\r\n  }\r\n  if (props.isAuth) return <Redirect to='/profile' />\r\n  return (\r\n    <div >\r\n      <h2>Login</h2>\r\n      <LoginForm {...props} onSubmit={onSubmit} />\r\n    </div>\r\n  )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captcha: state.auth.captcha,\r\n  isCaptcha: state.auth.isCaptcha,\r\n  isFetching: state.auth.isFetching\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n\r\n"],"sourceRoot":""}